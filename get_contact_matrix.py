#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Apr 10 00:11:24 2021

@author: ckadelka
"""

import numpy as np
import get_cfr00
import matplotlib.pyplot as plt
from matplotlib import cm


gp_in_agegp = np.array([0,1,1,1,1,1,1,1,1,2,2,2,2,3,3,3,3]) #age of each group


Cs=[[3.25086717002160,0.484451838704867,0.484451838704867,0.484451838704867,0.484451838704867,0.484451838704867,0.484451838704867,0.484451838704867,0.484451838704867,0.00118365743581078,0.00118365743581078,0.00118365743581078,0.00118365743581078,6.24777641636890e-05,6.24777641636890e-05,6.24777641636890e-05,6.24777641636890e-05],[0.517984488048347,1.21258559248636,1.21258559248636,1.21258559248636,1.21258559248636,1.21258559248636,1.21258559248636,1.21258559248636,1.21258559248636,0.00231359224570975,0.00231359224570975,0.00231359224570975,0.00231359224570975,0.000218649166132502,0.000218649166132502,0.000218649166132502,0.000218649166132502],[0.517984488048347,1.21258559248636,1.21258559248636,1.21258559248636,1.21258559248636,1.21258559248636,1.21258559248636,1.21258559248636,1.21258559248636,0.00231359224570975,0.00231359224570975,0.00231359224570975,0.00231359224570975,0.000218649166132502,0.000218649166132502,0.000218649166132502,0.000218649166132502],[0.517984488048347,1.21258559248636,1.21258559248636,1.21258559248636,1.21258559248636,1.21258559248636,1.21258559248636,1.21258559248636,1.21258559248636,0.00231359224570975,0.00231359224570975,0.00231359224570975,0.00231359224570975,0.000218649166132502,0.000218649166132502,0.000218649166132502,0.000218649166132502],[0.517984488048347,1.21258559248636,1.21258559248636,1.21258559248636,1.21258559248636,1.21258559248636,1.21258559248636,1.21258559248636,1.21258559248636,0.00231359224570975,0.00231359224570975,0.00231359224570975,0.00231359224570975,0.000218649166132502,0.000218649166132502,0.000218649166132502,0.000218649166132502],[0.517984488048347,1.21258559248636,1.21258559248636,1.21258559248636,1.21258559248636,1.21258559248636,1.21258559248636,1.21258559248636,1.21258559248636,0.00231359224570975,0.00231359224570975,0.00231359224570975,0.00231359224570975,0.000218649166132502,0.000218649166132502,0.000218649166132502,0.000218649166132502],[0.517984488048347,1.21258559248636,1.21258559248636,1.21258559248636,1.21258559248636,1.21258559248636,1.21258559248636,1.21258559248636,1.21258559248636,0.00231359224570975,0.00231359224570975,0.00231359224570975,0.00231359224570975,0.000218649166132502,0.000218649166132502,0.000218649166132502,0.000218649166132502],[0.517984488048347,1.21258559248636,1.21258559248636,1.21258559248636,1.21258559248636,1.21258559248636,1.21258559248636,1.21258559248636,1.21258559248636,0.00231359224570975,0.00231359224570975,0.00231359224570975,0.00231359224570975,0.000218649166132502,0.000218649166132502,0.000218649166132502,0.000218649166132502],[0.517984488048347,1.21258559248636,1.21258559248636,1.21258559248636,1.21258559248636,1.21258559248636,1.21258559248636,1.21258559248636,1.21258559248636,0.00231359224570975,0.00231359224570975,0.00231359224570975,0.00231359224570975,0.000218649166132502,0.000218649166132502,0.000218649166132502,0.000218649166132502],[0.0230742312664535,0.0843040645273302,0.0843040645273302,0.0843040645273302,0.0843040645273302,0.0843040645273302,0.0843040645273302,0.0843040645273302,0.0843040645273302,0.0230269690299254,0.0230269690299254,0.0230269690299254,0.0230269690299254,0.00959626345691299,0.00959626345691299,0.00959626345691299,0.00959626345691299],[0.0230742312664535,0.0843040645273302,0.0843040645273302,0.0843040645273302,0.0843040645273302,0.0843040645273302,0.0843040645273302,0.0843040645273302,0.0843040645273302,0.0230269690299254,0.0230269690299254,0.0230269690299254,0.0230269690299254,0.00959626345691299,0.00959626345691299,0.00959626345691299,0.00959626345691299],[0.0230742312664535,0.0843040645273302,0.0843040645273302,0.0843040645273302,0.0843040645273302,0.0843040645273302,0.0843040645273302,0.0843040645273302,0.0843040645273302,0.0230269690299254,0.0230269690299254,0.0230269690299254,0.0230269690299254,0.00959626345691299,0.00959626345691299,0.00959626345691299,0.00959626345691299],[0.0230742312664535,0.0843040645273302,0.0843040645273302,0.0843040645273302,0.0843040645273302,0.0843040645273302,0.0843040645273302,0.0843040645273302,0.0843040645273302,0.0230269690299254,0.0230269690299254,0.0230269690299254,0.0230269690299254,0.00959626345691299,0.00959626345691299,0.00959626345691299,0.00959626345691299],[0.0211440000749973,0.0288813621872611,0.0288813621872611,0.0288813621872611,0.0288813621872611,0.0288813621872611,0.0288813621872611,0.0288813621872611,0.0288813621872611,1.02042913074009e-80,1.02042913074009e-80,1.02042913074009e-80,1.02042913074009e-80,6.61414455246721e-113,6.61414455246721e-113,6.61414455246721e-113,6.61414455246721e-113],[0.0211440000749973,0.0288813621872611,0.0288813621872611,0.0288813621872611,0.0288813621872611,0.0288813621872611,0.0288813621872611,0.0288813621872611,0.0288813621872611,1.02042913074009e-80,1.02042913074009e-80,1.02042913074009e-80,1.02042913074009e-80,6.61414455246721e-113,6.61414455246721e-113,6.61414455246721e-113,6.61414455246721e-113],[0.0211440000749973,0.0288813621872611,0.0288813621872611,0.0288813621872611,0.0288813621872611,0.0288813621872611,0.0288813621872611,0.0288813621872611,0.0288813621872611,1.02042913074009e-80,1.02042913074009e-80,1.02042913074009e-80,1.02042913074009e-80,6.61414455246721e-113,6.61414455246721e-113,6.61414455246721e-113,6.61414455246721e-113],[0.0211440000749973,0.0288813621872611,0.0288813621872611,0.0288813621872611,0.0288813621872611,0.0288813621872611,0.0288813621872611,0.0288813621872611,0.0288813621872611,1.02042913074009e-80,1.02042913074009e-80,1.02042913074009e-80,1.02042913074009e-80,6.61414455246721e-113,6.61414455246721e-113,6.61414455246721e-113,6.61414455246721e-113]]
Cw=[[0.0267025863732318,0.0697008370582329,0.0697008370582329,0.0697008370582329,0.0697008370582329,0.0697008370582329,0.0697008370582329,0.0697008370582329,0.0697008370582329,1.01031590662995e-05,1.01031590662995e-05,1.01031590662995e-05,1.01031590662995e-05,7.92822801396039e-66,7.92822801396039e-66,7.92822801396039e-66,7.92822801396039e-66],[0.0573137504979691,4.75406259729879,4.75406259729879,4.75406259729879,4.75406259729879,4.75406259729879,4.75406259729879,4.75406259729879,4.75406259729879,2.26360339245200e-05,2.26360339245200e-05,2.26360339245200e-05,2.26360339245200e-05,6.57673901119302e-06,6.57673901119302e-06,6.57673901119302e-06,6.57673901119302e-06],[0.0573137504979691,4.75406259729879,4.75406259729879,4.75406259729879,4.75406259729879,4.75406259729879,4.75406259729879,4.75406259729879,4.75406259729879,2.26360339245200e-05,2.26360339245200e-05,2.26360339245200e-05,2.26360339245200e-05,6.57673901119302e-06,6.57673901119302e-06,6.57673901119302e-06,6.57673901119302e-06],[0.0573137504979691,4.75406259729879,4.75406259729879,4.75406259729879,4.75406259729879,4.75406259729879,4.75406259729879,4.75406259729879,4.75406259729879,2.26360339245200e-05,2.26360339245200e-05,2.26360339245200e-05,2.26360339245200e-05,6.57673901119302e-06,6.57673901119302e-06,6.57673901119302e-06,6.57673901119302e-06],[0.0573137504979691,4.75406259729879,4.75406259729879,4.75406259729879,4.75406259729879,4.75406259729879,4.75406259729879,4.75406259729879,4.75406259729879,2.26360339245200e-05,2.26360339245200e-05,2.26360339245200e-05,2.26360339245200e-05,6.57673901119302e-06,6.57673901119302e-06,6.57673901119302e-06,6.57673901119302e-06],[0.0573137504979691,4.75406259729879,4.75406259729879,4.75406259729879,4.75406259729879,4.75406259729879,4.75406259729879,4.75406259729879,4.75406259729879,2.26360339245200e-05,2.26360339245200e-05,2.26360339245200e-05,2.26360339245200e-05,6.57673901119302e-06,6.57673901119302e-06,6.57673901119302e-06,6.57673901119302e-06],[0.0573137504979691,4.75406259729879,4.75406259729879,4.75406259729879,4.75406259729879,4.75406259729879,4.75406259729879,4.75406259729879,4.75406259729879,2.26360339245200e-05,2.26360339245200e-05,2.26360339245200e-05,2.26360339245200e-05,6.57673901119302e-06,6.57673901119302e-06,6.57673901119302e-06,6.57673901119302e-06],[0.0573137504979691,4.75406259729879,4.75406259729879,4.75406259729879,4.75406259729879,4.75406259729879,4.75406259729879,4.75406259729879,4.75406259729879,2.26360339245200e-05,2.26360339245200e-05,2.26360339245200e-05,2.26360339245200e-05,6.57673901119302e-06,6.57673901119302e-06,6.57673901119302e-06,6.57673901119302e-06],[0.0573137504979691,4.75406259729879,4.75406259729879,4.75406259729879,4.75406259729879,4.75406259729879,4.75406259729879,4.75406259729879,4.75406259729879,2.26360339245200e-05,2.26360339245200e-05,2.26360339245200e-05,2.26360339245200e-05,6.57673901119302e-06,6.57673901119302e-06,6.57673901119302e-06,6.57673901119302e-06],[1.14043518585961e-05,0.000430392337477494,0.000430392337477494,0.000430392337477494,0.000430392337477494,0.000430392337477494,0.000430392337477494,0.000430392337477494,0.000430392337477494,3.65603680705912e-05,3.65603680705912e-05,3.65603680705912e-05,3.65603680705912e-05,1.82708534628350e-05,1.82708534628350e-05,1.82708534628350e-05,1.82708534628350e-05],[1.14043518585961e-05,0.000430392337477494,0.000430392337477494,0.000430392337477494,0.000430392337477494,0.000430392337477494,0.000430392337477494,0.000430392337477494,0.000430392337477494,3.65603680705912e-05,3.65603680705912e-05,3.65603680705912e-05,3.65603680705912e-05,1.82708534628350e-05,1.82708534628350e-05,1.82708534628350e-05,1.82708534628350e-05],[1.14043518585961e-05,0.000430392337477494,0.000430392337477494,0.000430392337477494,0.000430392337477494,0.000430392337477494,0.000430392337477494,0.000430392337477494,0.000430392337477494,3.65603680705912e-05,3.65603680705912e-05,3.65603680705912e-05,3.65603680705912e-05,1.82708534628350e-05,1.82708534628350e-05,1.82708534628350e-05,1.82708534628350e-05],[1.14043518585961e-05,0.000430392337477494,0.000430392337477494,0.000430392337477494,0.000430392337477494,0.000430392337477494,0.000430392337477494,0.000430392337477494,0.000430392337477494,3.65603680705912e-05,3.65603680705912e-05,3.65603680705912e-05,3.65603680705912e-05,1.82708534628350e-05,1.82708534628350e-05,1.82708534628350e-05,1.82708534628350e-05],[1.18637131219348e-89,0.000273505075204048,0.000273505075204048,0.000273505075204048,0.000273505075204048,0.000273505075204048,0.000273505075204048,0.000273505075204048,0.000273505075204048,1.02831671225411e-05,1.02831671225411e-05,1.02831671225411e-05,1.02831671225411e-05,8.28040508722867e-43,8.28040508722867e-43,8.28040508722867e-43,8.28040508722867e-43],[1.18637131219348e-89,0.000273505075204048,0.000273505075204048,0.000273505075204048,0.000273505075204048,0.000273505075204048,0.000273505075204048,0.000273505075204048,0.000273505075204048,1.02831671225411e-05,1.02831671225411e-05,1.02831671225411e-05,1.02831671225411e-05,8.28040508722867e-43,8.28040508722867e-43,8.28040508722867e-43,8.28040508722867e-43],[1.18637131219348e-89,0.000273505075204048,0.000273505075204048,0.000273505075204048,0.000273505075204048,0.000273505075204048,0.000273505075204048,0.000273505075204048,0.000273505075204048,1.02831671225411e-05,1.02831671225411e-05,1.02831671225411e-05,1.02831671225411e-05,8.28040508722867e-43,8.28040508722867e-43,8.28040508722867e-43,8.28040508722867e-43],[1.18637131219348e-89,0.000273505075204048,0.000273505075204048,0.000273505075204048,0.000273505075204048,0.000273505075204048,0.000273505075204048,0.000273505075204048,0.000273505075204048,1.02831671225411e-05,1.02831671225411e-05,1.02831671225411e-05,1.02831671225411e-05,8.28040508722867e-43,8.28040508722867e-43,8.28040508722867e-43,8.28040508722867e-43]]
Co=[[2.38853135970363,2.34398150147910,2.34398150147910,2.34398150147910,2.34398150147910,2.34398150147910,2.34398150147910,2.34398150147910,2.34398150147910,0.164071199199577,0.164071199199577,0.164071199199577,0.164071199199577,0.0396373722723774,0.0396373722723774,0.0396373722723774,0.0396373722723774],[0.457297139361194,3.96557597037959,3.96557597037959,3.96557597037959,3.96557597037959,3.96557597037959,3.96557597037959,3.96557597037959,3.96557597037959,0.172305845649109,0.172305845649109,0.172305845649109,0.172305845649109,0.0377311294186857,0.0377311294186857,0.0377311294186857,0.0377311294186857],[0.457297139361194,3.96557597037959,3.96557597037959,3.96557597037959,3.96557597037959,3.96557597037959,3.96557597037959,3.96557597037959,3.96557597037959,0.172305845649109,0.172305845649109,0.172305845649109,0.172305845649109,0.0377311294186857,0.0377311294186857,0.0377311294186857,0.0377311294186857],[0.457297139361194,3.96557597037959,3.96557597037959,3.96557597037959,3.96557597037959,3.96557597037959,3.96557597037959,3.96557597037959,3.96557597037959,0.172305845649109,0.172305845649109,0.172305845649109,0.172305845649109,0.0377311294186857,0.0377311294186857,0.0377311294186857,0.0377311294186857],[0.457297139361194,3.96557597037959,3.96557597037959,3.96557597037959,3.96557597037959,3.96557597037959,3.96557597037959,3.96557597037959,3.96557597037959,0.172305845649109,0.172305845649109,0.172305845649109,0.172305845649109,0.0377311294186857,0.0377311294186857,0.0377311294186857,0.0377311294186857],[0.457297139361194,3.96557597037959,3.96557597037959,3.96557597037959,3.96557597037959,3.96557597037959,3.96557597037959,3.96557597037959,3.96557597037959,0.172305845649109,0.172305845649109,0.172305845649109,0.172305845649109,0.0377311294186857,0.0377311294186857,0.0377311294186857,0.0377311294186857],[0.457297139361194,3.96557597037959,3.96557597037959,3.96557597037959,3.96557597037959,3.96557597037959,3.96557597037959,3.96557597037959,3.96557597037959,0.172305845649109,0.172305845649109,0.172305845649109,0.172305845649109,0.0377311294186857,0.0377311294186857,0.0377311294186857,0.0377311294186857],[0.457297139361194,3.96557597037959,3.96557597037959,3.96557597037959,3.96557597037959,3.96557597037959,3.96557597037959,3.96557597037959,3.96557597037959,0.172305845649109,0.172305845649109,0.172305845649109,0.172305845649109,0.0377311294186857,0.0377311294186857,0.0377311294186857,0.0377311294186857],[0.457297139361194,3.96557597037959,3.96557597037959,3.96557597037959,3.96557597037959,3.96557597037959,3.96557597037959,3.96557597037959,3.96557597037959,0.172305845649109,0.172305845649109,0.172305845649109,0.172305845649109,0.0377311294186857,0.0377311294186857,0.0377311294186857,0.0377311294186857],[0.163272184011097,2.32923869540132,2.32923869540132,2.32923869540132,2.32923869540132,2.32923869540132,2.32923869540132,2.32923869540132,2.32923869540132,0.500606306619918,0.500606306619918,0.500606306619918,0.500606306619918,0.0917586941672858,0.0917586941672858,0.0917586941672858,0.0917586941672858],[0.163272184011097,2.32923869540132,2.32923869540132,2.32923869540132,2.32923869540132,2.32923869540132,2.32923869540132,2.32923869540132,2.32923869540132,0.500606306619918,0.500606306619918,0.500606306619918,0.500606306619918,0.0917586941672858,0.0917586941672858,0.0917586941672858,0.0917586941672858],[0.163272184011097,2.32923869540132,2.32923869540132,2.32923869540132,2.32923869540132,2.32923869540132,2.32923869540132,2.32923869540132,2.32923869540132,0.500606306619918,0.500606306619918,0.500606306619918,0.500606306619918,0.0917586941672858,0.0917586941672858,0.0917586941672858,0.0917586941672858],[0.163272184011097,2.32923869540132,2.32923869540132,2.32923869540132,2.32923869540132,2.32923869540132,2.32923869540132,2.32923869540132,2.32923869540132,0.500606306619918,0.500606306619918,0.500606306619918,0.500606306619918,0.0917586941672858,0.0917586941672858,0.0917586941672858,0.0917586941672858],[0.115011079050808,1.12017782678115,1.12017782678115,1.12017782678115,1.12017782678115,1.12017782678115,1.12017782678115,1.12017782678115,1.12017782678115,0.306900555317688,0.306900555317688,0.306900555317688,0.306900555317688,0.0942735852039817,0.0942735852039817,0.0942735852039817,0.0942735852039817],[0.115011079050808,1.12017782678115,1.12017782678115,1.12017782678115,1.12017782678115,1.12017782678115,1.12017782678115,1.12017782678115,1.12017782678115,0.306900555317688,0.306900555317688,0.306900555317688,0.306900555317688,0.0942735852039817,0.0942735852039817,0.0942735852039817,0.0942735852039817],[0.115011079050808,1.12017782678115,1.12017782678115,1.12017782678115,1.12017782678115,1.12017782678115,1.12017782678115,1.12017782678115,1.12017782678115,0.306900555317688,0.306900555317688,0.306900555317688,0.306900555317688,0.0942735852039817,0.0942735852039817,0.0942735852039817,0.0942735852039817],[0.115011079050808,1.12017782678115,1.12017782678115,1.12017782678115,1.12017782678115,1.12017782678115,1.12017782678115,1.12017782678115,1.12017782678115,0.306900555317688,0.306900555317688,0.306900555317688,0.306900555317688,0.0942735852039817,0.0942735852039817,0.0942735852039817,0.0942735852039817]]
Ch=[[1.81585401091911,2.14820330376675,2.14820330376675,2.14820330376675,2.14820330376675,2.14820330376675,2.14820330376675,2.14820330376675,2.14820330376675,0.0157898450298546,0.0157898450298546,0.0157898450298546,0.0157898450298546,0.00387367287794765,0.00387367287794765,0.00387367287794765,0.00387367287794765],[0.925923401466904,2.18915061631724,2.18915061631724,2.18915061631724,2.18915061631724,2.18915061631724,2.18915061631724,2.18915061631724,2.18915061631724,0.0311239270186660,0.0311239270186660,0.0311239270186660,0.0311239270186660,0.00687823184027853,0.00687823184027853,0.00687823184027853,0.00687823184027853],[0.925923401466904,2.18915061631724,2.18915061631724,2.18915061631724,2.18915061631724,2.18915061631724,2.18915061631724,2.18915061631724,2.18915061631724,0.0311239270186660,0.0311239270186660,0.0311239270186660,0.0311239270186660,0.00687823184027853,0.00687823184027853,0.00687823184027853,0.00687823184027853],[0.925923401466904,2.18915061631724,2.18915061631724,2.18915061631724,2.18915061631724,2.18915061631724,2.18915061631724,2.18915061631724,2.18915061631724,0.0311239270186660,0.0311239270186660,0.0311239270186660,0.0311239270186660,0.00687823184027853,0.00687823184027853,0.00687823184027853,0.00687823184027853],[0.925923401466904,2.18915061631724,2.18915061631724,2.18915061631724,2.18915061631724,2.18915061631724,2.18915061631724,2.18915061631724,2.18915061631724,0.0311239270186660,0.0311239270186660,0.0311239270186660,0.0311239270186660,0.00687823184027853,0.00687823184027853,0.00687823184027853,0.00687823184027853],[0.925923401466904,2.18915061631724,2.18915061631724,2.18915061631724,2.18915061631724,2.18915061631724,2.18915061631724,2.18915061631724,2.18915061631724,0.0311239270186660,0.0311239270186660,0.0311239270186660,0.0311239270186660,0.00687823184027853,0.00687823184027853,0.00687823184027853,0.00687823184027853],[0.925923401466904,2.18915061631724,2.18915061631724,2.18915061631724,2.18915061631724,2.18915061631724,2.18915061631724,2.18915061631724,2.18915061631724,0.0311239270186660,0.0311239270186660,0.0311239270186660,0.0311239270186660,0.00687823184027853,0.00687823184027853,0.00687823184027853,0.00687823184027853],[0.925923401466904,2.18915061631724,2.18915061631724,2.18915061631724,2.18915061631724,2.18915061631724,2.18915061631724,2.18915061631724,2.18915061631724,0.0311239270186660,0.0311239270186660,0.0311239270186660,0.0311239270186660,0.00687823184027853,0.00687823184027853,0.00687823184027853,0.00687823184027853],[0.925923401466904,2.18915061631724,2.18915061631724,2.18915061631724,2.18915061631724,2.18915061631724,2.18915061631724,2.18915061631724,2.18915061631724,0.0311239270186660,0.0311239270186660,0.0311239270186660,0.0311239270186660,0.00687823184027853,0.00687823184027853,0.00687823184027853,0.00687823184027853],[0.739213380118482,1.33244909898850,1.33244909898850,1.33244909898850,1.33244909898850,1.33244909898850,1.33244909898850,1.33244909898850,1.33244909898850,0.618776604280790,0.618776604280790,0.618776604280790,0.618776604280790,0.0465183139108347,0.0465183139108347,0.0465183139108347,0.0465183139108347],[0.739213380118482,1.33244909898850,1.33244909898850,1.33244909898850,1.33244909898850,1.33244909898850,1.33244909898850,1.33244909898850,1.33244909898850,0.618776604280790,0.618776604280790,0.618776604280790,0.618776604280790,0.0465183139108347,0.0465183139108347,0.0465183139108347,0.0465183139108347],[0.739213380118482,1.33244909898850,1.33244909898850,1.33244909898850,1.33244909898850,1.33244909898850,1.33244909898850,1.33244909898850,1.33244909898850,0.618776604280790,0.618776604280790,0.618776604280790,0.618776604280790,0.0465183139108347,0.0465183139108347,0.0465183139108347,0.0465183139108347],[0.739213380118482,1.33244909898850,1.33244909898850,1.33244909898850,1.33244909898850,1.33244909898850,1.33244909898850,1.33244909898850,1.33244909898850,0.618776604280790,0.618776604280790,0.618776604280790,0.618776604280790,0.0465183139108347,0.0465183139108347,0.0465183139108347,0.0465183139108347],[0.775848653461235,1.55438427150393,1.55438427150393,1.55438427150393,1.55438427150393,1.55438427150393,1.55438427150393,1.55438427150393,1.55438427150393,0.182215592904827,0.182215592904827,0.182215592904827,0.182215592904827,0.301984103103577,0.301984103103577,0.301984103103577,0.301984103103577],[0.775848653461235,1.55438427150393,1.55438427150393,1.55438427150393,1.55438427150393,1.55438427150393,1.55438427150393,1.55438427150393,1.55438427150393,0.182215592904827,0.182215592904827,0.182215592904827,0.182215592904827,0.301984103103577,0.301984103103577,0.301984103103577,0.301984103103577],[0.775848653461235,1.55438427150393,1.55438427150393,1.55438427150393,1.55438427150393,1.55438427150393,1.55438427150393,1.55438427150393,1.55438427150393,0.182215592904827,0.182215592904827,0.182215592904827,0.182215592904827,0.301984103103577,0.301984103103577,0.301984103103577,0.301984103103577],[0.775848653461235,1.55438427150393,1.55438427150393,1.55438427150393,1.55438427150393,1.55438427150393,1.55438427150393,1.55438427150393,1.55438427150393,0.182215592904827,0.182215592904827,0.182215592904827,0.182215592904827,0.301984103103577,0.301984103103577,0.301984103103577,0.301984103103577]]
C_total = np.array(Cs) + np.array(Cw) + np.array(Co) + np.array(Ch)



def get_4by4_from_16by16(C):
    which = [0,1,10,14]
    res = np.zeros((4,4))
    for i,ii in enumerate(which):
        for j,jj in enumerate(which):
            res[i,j] = C[ii][jj]
    return res

def symmetrize_Funk2020(C,N):
    return np.array([[1/2/N[i]*(C[i,j]*N[i]+C[j,i]*N[j]) for j in range(len(C))] for i in range(len(C))],dtype=np.float64)
    

def issymmetric(C,N):
    for i in range(len(C)):
        for j in range(i+1,len(C)):
            if np.max(np.abs(C[i,j]*N[i]-C[j,i]*N[j]))>1e-5:
                return False,i,j,C[i,j]*N[i],C[j,i]*N[j]
    return True        

def rowsums(C):
    return np.sum(C,1)


N_17 = get_cfr00.Nsize
N_4 = np.array(get_cfr00.population_by_age_gp_model)

C_4 = get_4by4_from_16by16(C_total) #np.array([[7.48,5.05,0.18,0.04],[1.96,12.12,0.21,0.04],[0.93,3.75,1.14,0.15],[0.91,2.70,0.49,0.40]])
S_4 = symmetrize_Funk2020(C_4,N_4) 


C = S_4.copy()

if __name__ == '__main__':
    #check
    f,ax=plt.subplots(figsize=(2.5,3))
    im=ax.imshow(np.log2(C_4),cmap=cm.Greens,vmin=np.log2(0.01),vmax=np.log2(16))    
    ax.set_yticks(range(len(C)))
    ax.set_yticklabels(['0-15','16-64','65-74','75+'])
    ax.set_ylabel('Average daily contacts\nan individual of age')
    ax.set_xticks(range(len(C)))
    ax.set_xticklabels(['0-15','16-64','65-74','75+'])
    ax.set_xlabel('has with individuals of age')
    ax.yaxis.set_ticks_position('none')
    ax.xaxis.set_ticks_position('none')
    #f.subplots_adjust(left=0.1,right=0.7,bottom=0.2,top=0.9)
    #cbar_ax = f.add_axes([0.72, 0.212, 0.03, 0.6775])
    #cbar = f.colorbar(im, cax=cbar_ax)
    ##cbar = f.colorbar(im)
    #ticks = np.log2([0.01,0.1,1,5,10])
    #cbar.set_ticks(ticks)
    #cbar.set_ticklabels([r'$\leq$0.01']+list(map(str,[0.1,1,5,10])))
    #cbar.set_label('average daily contacts')
    
    from mpl_toolkits.axes_grid1 import make_axes_locatable
    divider = make_axes_locatable(ax)
    caxax = divider.append_axes("right", size="8%", pad=0.1)
    cbar=f.colorbar(im,cax=caxax)
    ticks = np.log2([0.01,0.1,1,10])
    cbar.set_ticks(ticks)
    cbar.set_ticklabels(list(map(str,[0.01,0.1,1,10])))
    #cbar.set_label('average daily contacts')
    plt.savefig('contact_matrix_raw44.pdf',bbox_inches = "tight")

    
    
    f,ax=plt.subplots(figsize=(2.5,3))
    im=ax.imshow(np.log2(C),cmap=cm.Greens,vmin=np.log2(0.01),vmax=np.log2(16))    
    print(issymmetric(C,N_4))
    print(rowsums(C))
    
    ax.set_yticks(range(len(C)))
    ax.set_yticklabels(['0-15','16-64','65-74','75+'])
    ax.set_ylabel('Average daily contacts\nan individual of age')
    ax.set_xticks(range(len(C)))
    ax.set_xticklabels(['0-15','16-64','65-74','75+'])
    ax.set_xlabel('has with individuals of age')
    ax.yaxis.set_ticks_position('none')
    ax.xaxis.set_ticks_position('none')
    #f.subplots_adjust(left=0.1,right=0.7,bottom=0.2,top=0.9)
    #cbar_ax = f.add_axes([0.72, 0.212, 0.03, 0.6775])
    #cbar = f.colorbar(im, cax=cbar_ax)
    ##cbar = f.colorbar(im)
    #ticks = np.log2([0.01,0.1,1,5,10])
    #cbar.set_ticks(ticks)
    #cbar.set_ticklabels([r'$\leq$0.01']+list(map(str,[0.1,1,5,10])))
    #cbar.set_label('average daily contacts')
    
    from mpl_toolkits.axes_grid1 import make_axes_locatable
    divider = make_axes_locatable(ax)
    caxax = divider.append_axes("right", size="8%", pad=0.1)
    cbar=f.colorbar(im,cax=caxax)
    ticks = np.log2([0.01,0.1,1,10])
    cbar.set_ticks(ticks)
    cbar.set_ticklabels(list(map(str,[0.01,0.1,1,10])))
    #cbar.set_label('average daily contacts')
    plt.savefig('contact_matrix_symmetric44.pdf',bbox_inches = "tight")
 
    f,ax=plt.subplots(figsize=(1.5,2.3))
    im=ax.imshow(np.log10(np.reshape(N_4,(4,1))),cmap=cm.Reds,aspect=0.8) 
    ax.yaxis.set_ticks_position('none')
    ax.xaxis.set_ticks_position('none')
    for i in range(4):
        ax.text(0,i,str((np.round(N_4[i]/1e6,1))),ha='center',va='center',color='k' if N_4[i]<1e8 else 'white')
    ax.set_ylabel('U.S. population [million] of age')
    ax.set_yticks(range(len(C)))
    ax.set_yticklabels(['0-15','16-64','65-74','75+'])
    ax.set_xticks([])
    plt.savefig('N4.pdf',bbox_inches = "tight")     
    
    f,ax=plt.subplots(figsize=(1.5,4))
    im=ax.imshow(np.log10(np.reshape(N_17,(17,1))),cmap=cm.Reds,aspect=0.4) 
    ax.yaxis.set_ticks_position('none')
    ax.xaxis.set_ticks_position('none')
    for i in range(17):
        ax.text(0,i,str((np.round(N_17[i]/1e6,2))) if N_17[i]<1e6 else ((np.round(N_17[i]/1e6,1)) if N_17[i]<1e8 else int(np.round(N_17[i]/1e6))),ha='center',va='center',color='k' if N_17[i]<5e7 else 'white')
    ax.set_ylabel('U.S. population [million] in sub-population')
    ax.set_yticks(range(len(N_17)))
    ax.set_yticklabels(list(map(str,range(1,17+1))))
    ax.set_xticks([])
    plt.savefig('N17.pdf',bbox_inches = "tight")       
    

#expand from 4 to 17
C_17 = np.zeros((17,17))
for i in range(17):
    for j in range(17):
        C_17[i,j] = C[gp_in_agegp[i],gp_in_agegp[j]]

if __name__ == '__main__':
    #check
    f,ax=plt.subplots()
    ax.imshow(C_17,cmap=cm.Greens)
    print(issymmetric(C_17,N_17))
    print(rowsums(C_17))
    
    f,ax = plt.subplots(figsize=(5,4))
    im=ax.imshow(np.log2(C_17),cmap=cm.Greens,vmin=np.log2(0.01),vmax=np.log2(16))   
    ax.set_yticks(range(17))
    ax.set_yticklabels(list(map(str,range(1,17+1))))
    ax.set_ylabel('Average daily contacts\nan individual in sub-population')
    ax.set_xticks(range(17))
    ax.set_xticklabels(list(map(str,range(1,17+1))))
    ax.set_xlabel('has with individuals of sub-population')
    ax.yaxis.set_ticks_position('none')
    ax.xaxis.set_ticks_position('none')
    #f.subplots_adjust(left=0.1,right=0.7,bottom=0.2,top=0.9)
    #cbar_ax = f.add_axes([0.72, 0.212, 0.03, 0.6775])
    #cbar = f.colorbar(im, cax=cbar_ax)
    ##cbar = f.colorbar(im)
    #ticks = np.log2([0.01,0.1,1,5,10])
    #cbar.set_ticks(ticks)
    #cbar.set_ticklabels([r'$\leq$0.01']+list(map(str,[0.1,1,5,10])))
    #cbar.set_label('average daily contacts')
    
    from mpl_toolkits.axes_grid1 import make_axes_locatable
    divider = make_axes_locatable(ax)
    caxax = divider.append_axes("right", size="4%", pad=0.1)
    cbar=f.colorbar(im,cax=caxax)
    ticks = np.log2([0.01,0.1,1,10])
    cbar.set_ticks(ticks)
    cbar.set_ticklabels(list(map(str,[0.01,0.1,1,10])))
    #cbar.set_label('average daily contacts')
    plt.savefig('contact_matrix_symmetric1717_v1.pdf',bbox_inches = "tight")

#adjust for differential group sizes
C_17[:,1:9] = np.multiply(N_17[1:9]/sum(N_17[1:9]),C_17[:,1:9])
C_17[:,9:13] = np.multiply(N_17[9:13]/sum(N_17[9:13]),C_17[:,9:13])
C_17[:,13:17] = np.multiply(N_17[13:17]/sum(N_17[13:17]),C_17[:,13:17])

if __name__ == '__main__':
    #check
    f,ax=plt.subplots()
    ax.imshow(C_17,cmap=cm.Greens)
    print(issymmetric(C_17,N_17))
    print(rowsums(C_17))

    f,ax = plt.subplots(figsize=(5,4))
    im=ax.imshow(np.log2(C_17),cmap=cm.Greens,vmin=np.log2(0.01),vmax=np.log2(16))   
    ax.set_yticks(range(17))
    ax.set_yticklabels(list(map(str,range(1,17+1))))
    ax.set_ylabel('Average daily contacts\nan individual in sub-population')
    ax.set_xticks(range(17))
    ax.set_xticklabels(list(map(str,range(1,17+1))))
    ax.set_xlabel('has with individuals of sub-population')
    ax.yaxis.set_ticks_position('none')
    ax.xaxis.set_ticks_position('none')
    #f.subplots_adjust(left=0.1,right=0.7,bottom=0.2,top=0.9)
    #cbar_ax = f.add_axes([0.72, 0.212, 0.03, 0.6775])
    #cbar = f.colorbar(im, cax=cbar_ax)
    ##cbar = f.colorbar(im)
    #ticks = np.log2([0.01,0.1,1,5,10])
    #cbar.set_ticks(ticks)
    #cbar.set_ticklabels([r'$\leq$0.01']+list(map(str,[0.1,1,5,10])))
    #cbar.set_label('average daily contacts')
    
    from mpl_toolkits.axes_grid1 import make_axes_locatable
    divider = make_axes_locatable(ax)
    caxax = divider.append_axes("right", size="4%", pad=0.1)
    cbar=f.colorbar(im,cax=caxax)
    ticks = np.log2([0.01,0.1,1,10])
    cbar.set_ticks(ticks)
    cbar.set_ticklabels(list(map(str,[0.01,0.1,1,10])))
    #cbar.set_label('average daily contacts')
    plt.savefig('contact_matrix_symmetric1717_v2.pdf',bbox_inches = "tight")


#adjust for differential contact rates, rowsums rho, from Lancet Public Health paper
adjustment_factor=1
odds_ratio_hcw=3.4
odds_ratio_nh = 1#4.76
rho = [1,
       adjustment_factor*odds_ratio_hcw,adjustment_factor*odds_ratio_hcw,1+(adjustment_factor*odds_ratio_hcw-1)*2/3,1+(adjustment_factor*odds_ratio_hcw-1)*2/3,1+(adjustment_factor*odds_ratio_hcw-1)*1/3,1+(adjustment_factor*odds_ratio_hcw-1)*1/3,1,1,
       adjustment_factor*odds_ratio_nh,adjustment_factor*odds_ratio_nh,1,1,
       adjustment_factor*odds_ratio_nh,adjustment_factor*odds_ratio_nh,1,1]
rho[1:9] = rho[1:9]/np.dot(N_17[1:9]/sum(N_17[1:9]),rho[1:9])
rho[9:13] = rho[9:13]/np.dot(N_17[9:13]/sum(N_17[9:13]),rho[9:13])
rho[13:17] = rho[13:17]/np.dot(N_17[13:17]/sum(N_17[13:17]),rho[13:17])

for i in range(17):
    for j in range(17):
        C_17[i,j]*=rho[i]*rho[j]

if __name__ == '__main__':
    #check
    f,ax=plt.subplots()
    ax.imshow(C_17,cmap=cm.Greens)
    print(issymmetric(C_17,N_17))
    print(rowsums(C_17))
    
    f,ax = plt.subplots(figsize=(5,4))
    im=ax.imshow(np.log2(C_17),cmap=cm.Greens,vmin=np.log2(0.01),vmax=np.log2(16))   
    ax.set_yticks(range(17))
    ax.set_yticklabels(list(map(str,range(1,17+1))))
    ax.set_ylabel('Average daily contacts\nan individual in sub-population')
    ax.set_xticks(range(17))
    ax.set_xticklabels(list(map(str,range(1,17+1))))
    ax.set_xlabel('has with individuals of sub-population')
    ax.yaxis.set_ticks_position('none')
    ax.xaxis.set_ticks_position('none')
    #f.subplots_adjust(left=0.1,right=0.7,bottom=0.2,top=0.9)
    #cbar_ax = f.add_axes([0.72, 0.212, 0.03, 0.6775])
    #cbar = f.colorbar(im, cax=cbar_ax)
    ##cbar = f.colorbar(im)
    #ticks = np.log2([0.01,0.1,1,5,10])
    #cbar.set_ticks(ticks)
    #cbar.set_ticklabels([r'$\leq$0.01']+list(map(str,[0.1,1,5,10])))
    #cbar.set_label('average daily contacts')
    
    from mpl_toolkits.axes_grid1 import make_axes_locatable
    divider = make_axes_locatable(ax)
    caxax = divider.append_axes("right", size="4%", pad=0.1)
    cbar=f.colorbar(im,cax=caxax)
    ticks = np.log2([0.01,0.1,1,10])
    cbar.set_ticks(ticks)
    cbar.set_ticklabels(list(map(str,[0.01,0.1,1,10])))
    #cbar.set_label('average daily contacts')
    plt.savefig('contact_matrix_symmetric1717_v3.pdf',bbox_inches = "tight")


previous_rowsums = rowsums(C_17)

#ad
ratio_contacts_nh_not_nh = 2
rho = [1,
       1,1,1,1,1,1,1,1,
       ratio_contacts_nh_not_nh,ratio_contacts_nh_not_nh,1,1,
       ratio_contacts_nh_not_nh,ratio_contacts_nh_not_nh,1,1]
rho[1:9] = rho[1:9]/np.dot(N_17[1:9]/sum(N_17[1:9]),rho[1:9])
rho[9:13] = rho[9:13]/np.dot(N_17[9:13]/sum(N_17[9:13]),rho[9:13])
rho[13:17] = rho[13:17]/np.dot(N_17[13:17]/sum(N_17[13:17]),rho[13:17])
rho[9:11]=rho[11:13]
rho[13:15]=rho[15:17]

for i in range(17):
    for j in range(17):
        C_17[i,j]*=rho[i]*rho[j]

new_rowsums = rowsums(C_17)

if __name__ == '__main__':
    #check
    f,ax=plt.subplots()
    ax.imshow(C_17,cmap=cm.Greens)
    print(issymmetric(C_17,N_17))
    print(rowsums(C_17))

#add within-nh contacts
indices_nursing_home = np.array([9,10,13,14])
dummy = C_17[indices_nursing_home,:][:,indices_nursing_home]
multiplier = new_rowsums[indices_nursing_home]/rowsums(dummy)
C_nh = dummy.copy()
for i in range(4):
    for j in range(4):
        C_nh[i,j] *= np.sqrt(multiplier[i]*multiplier[j])

for i,index in enumerate(indices_nursing_home):
    C_17[index,indices_nursing_home] += C_nh[i,:]

if __name__ == '__main__': 
    #check
    f,ax=plt.subplots()
    ax.imshow(C_17,cmap=cm.Greens)
    print(issymmetric(C_17,N_17))
    print(rowsums(C_17))

contact_matrix = symmetrize_Funk2020(C_17,N_17) 

if __name__ == '__main__':
    #check
    f,ax=plt.subplots()
    ax.imshow(contact_matrix,cmap=cm.Greens)
    print(issymmetric(contact_matrix,N_17))
    print(rowsums(contact_matrix))
    
        
    f,ax = plt.subplots(figsize=(5,4))
    im=ax.imshow(np.log2(contact_matrix),cmap=cm.Greens,vmin=np.log2(0.01),vmax=np.log2(16))   
    ax.set_yticks(range(17))
    ax.set_yticklabels(list(map(str,range(1,17+1))))
    ax.set_ylabel('Average daily contacts\nan individual in sub-population')
    ax.set_xticks(range(17))
    ax.set_xticklabels(list(map(str,range(1,17+1))))
    ax.set_xlabel('has with individuals of sub-population')
    ax.yaxis.set_ticks_position('none')
    ax.xaxis.set_ticks_position('none')
    #f.subplots_adjust(left=0.1,right=0.7,bottom=0.2,top=0.9)
    #cbar_ax = f.add_axes([0.72, 0.212, 0.03, 0.6775])
    #cbar = f.colorbar(im, cax=cbar_ax)
    ##cbar = f.colorbar(im)
    #ticks = np.log2([0.01,0.1,1,5,10])
    #cbar.set_ticks(ticks)
    #cbar.set_ticklabels([r'$\leq$0.01']+list(map(str,[0.1,1,5,10])))
    #cbar.set_label('average daily contacts')
    
    from mpl_toolkits.axes_grid1 import make_axes_locatable
    divider = make_axes_locatable(ax)
    caxax = divider.append_axes("right", size="4%", pad=0.1)
    cbar=f.colorbar(im,cax=caxax)
    ticks = np.log2([0.01,0.1,1,10])
    cbar.set_ticks(ticks)
    cbar.set_ticklabels(list(map(str,[0.01,0.1,1,10])))
    #cbar.set_label('average daily contacts')
    plt.savefig('contact_matrix_symmetric1717_vfinal.pdf',bbox_inches = "tight")
    




adjustment_factor = 1#2.54968#1/(Cw_small[1,1]/Ctotal_small[1,1])

# #new from Lancet Public Health 
#improve the 2.6 and 1.8 values for essential worker groups
rho = [1,adjustment_factor*3.4,adjustment_factor*3.4,1+(adjustment_factor*3.4-1)*2/3,1+(adjustment_factor*3.4-1)*2/3,1+(adjustment_factor*3.4-1)*1/3,1+(adjustment_factor*3.4-1)*1/3,1,1,adjustment_factor*4.76,adjustment_factor*4.76,1,1,adjustment_factor*4.76,adjustment_factor*4.76,1,1]
rho_normalized = np.array(rho)/(np.dot(rho,N_17)/sum(N_17))


#Ctilde = np.array([[rho_normalized[i]*C_total[i][j] for j in range(17)] for i in range(17)])
Ctilde = np.array([[rho_normalized[i]*(Cw[i][j]+1*Cs[i][j]+1*Co[i][j]+1*Ch[i][j]) for j in range(17)] for i in range(17)])
Ctilde[:,1:9] = np.multiply(N_17[1:9]/sum(N_17[1:9]),Ctilde[:,1:9])
Ctilde[:,9:13] = np.multiply(N_17[9:13]/sum(N_17[9:13]),Ctilde[:,9:13])
Ctilde[:,13:17] = np.multiply(N_17[13:17]/sum(N_17[13:17]),Ctilde[:,13:17])

old_contact_matrix = Ctilde.copy()

if __name__ == '__main__':
    #check
    f,ax=plt.subplots()
    ax.imshow(Ctilde,cmap=cm.Greens)
    print(issymmetric(Ctilde,N_17))
    print(rowsums(Ctilde))